# A named argument for a command-line command.
#
# This represents pairs of name-value argument pairs, e.g. --verbosity 2 would
# have a key of "--verbosity" and a value of 2.
#
# Note that this also represents unnamed arguments with the NamedArg constructor
# that does not take a second argument.
global data NamedArg =
  NamedArg        String
  NamedArgInteger String Integer
  NamedArgDouble  String Double
  NamedArgString  String String
  NamedArgPath    String Path

def getNamedArgName = match _
  NamedArg        n   = n
  NamedArgInteger n _ = n
  NamedArgDouble  n _ = n
  NamedArgString  n _ = n
  NamedArgPath    n _ = n

def getNamedArgValue dir = match _
  NamedArg        _   = None
  NamedArgInteger _ i = Some (str i)
  NamedArgDouble  _ d = Some (dstr d)
  NamedArgString  _ s = Some (s)
  NamedArgPath    _ p = Some (relative dir p.getPathName)

def namedArgToString dir separator namedArg =
  def name = namedArg.getNamedArgName
  def valueOpt = getNamedArgValue dir namedArg
  match valueOpt
    None       = name
    Some value = "{name}{separator}{value}"

def namedArgToListString dir namedArg =
  def name = namedArg.getNamedArgName
  def valueOpt = getNamedArgValue dir namedArg
  match valueOpt
    None       = name, Nil
    Some value = name, value, Nil

# Render a list of NamedArgs to a list of command-line argument strings.
#
# Creates a separate list item for each component of the NamedArg pairs,
# resolving any Paths to strings containing paths relative to `dir`.
#
# namedArgsToListString: (dir: String) => (namedArgs: List NamedArg) => List String
global def namedArgsToListString dir namedArgs =
  namedArgs
  | map (namedArgToListString dir _)
  | flatten

# Render a list of NamedArgs to a list of command-line argument strings.
#
# (dir: String) => Combines with NamedArgPath to construct a relative path.
#   Generally should be set to the the current working directory of the command.
# (prefix: String) => A prefix to use with each argument name, such as "--"
# (separator: String) => A string that separates the name from the argument,
#   such as "="
# (namedArgs: List NamedArg) => List of `NamedArgs`
# List String
global def namedArgsToCmdline dir prefix separator namedArgs =
  map ("{prefix}{namedArgToString dir separator _}") namedArgs
