tuple UserSimulationOptions =
  global Filter:             DUTSimulator => Boolean
  global CompileOutputDir:   String
  global CompilePlusargs:    List NamedArg
  global ExecuteOutputDir:   String
  global ExecutePlusargs:    List NamedArg

global def makeUserSimulationOptions simulatorName waves outputDir =
  def execOutputDir = "{outputDir}/execute"
  def compOutputDir = "{outputDir}/compile"
  def dutSimFilter dutSim =
    dutSimulatorNameEquals simulatorName dutSim
    && dutSimulatorWavesEquals waves dutSim
  UserSimulationOptions dutSimFilter compOutputDir Nil execOutputDir Nil


tuple DUTSimulatorPlan =
  global SimulatorName:      String
  global SimulatorVendor:    String
  global TestDriver:         String
  global Waves:              Boolean
  global Score:              DUT => DUTSimCompileOptions => DUTSimExecuteOptions => UserSimulationOptions => Double
  global SimulatorImp:       DUT => DUTSimCompileOptions => DUTSimExecuteOptions => UserSimulationOptions => SimulationOutput

global def makeDUTSimulatorPlan simName simVendor testDriverName waves score simImp =
  DUTSimulatorPlan simName simVendor testDriverName waves score simImp


global def makeDUTSimulator plan =
  def simulatorName   = plan.getDUTSimulatorPlanSimulatorName
  def simulatorVendor = plan.getDUTSimulatorPlanSimulatorVendor
  def testDriver      = plan.getDUTSimulatorPlanTestDriver
  def waves           = plan.getDUTSimulatorPlanWaves
  def imp             = plan.getDUTSimulatorPlanSimulatorImp

  def score (Quadruple dut compileOpts executeOpts userOpts) =
    plan.getDUTSimulatorPlanScore dut compileOpts executeOpts userOpts

  DUTSimulator simulatorName simulatorVendor testDriver waves score imp

tuple Quadruple a b c d =
  First:  a
  Second: b
  Third:  c
  Fourth: d

tuple DUTSimulator =
  global SimulatorName:   String
  global SimulatorVendor: String
  global TestDriver:      String
  global Waves:           Boolean
  Score:                  Quadruple DUT DUTSimCompileOptions DUTSimExecuteOptions UserSimulationOptions => Double
  Imp:                    DUT => DUTSimCompileOptions => DUTSimExecuteOptions => UserSimulationOptions => SimulationOutput

global def dutSimulatorVendorEquals     vendor     sim = sim.getDUTSimulatorSimulatorVendor ==~ vendor
global def dutSimulatorNameEquals       name       sim = sim.getDUTSimulatorSimulatorName ==~ name
global def dutSimulatorTestDriverEquals testDriver sim = sim.getDUTSimulatorTestDriver ==~ testDriver
global def dutSimulatorWavesEquals      waves      sim = match sim.getDUTSimulatorWaves waves
  True  True  = True
  False False = True
  _     _     = False


tuple DUTSimulationOptions =
  global CompileOptions: DUTSimCompileOptions
  global ExecuteOptions: DUTSimExecuteOptions

global def makeDUTSimulationOptions compileOpts executeOpts = DUTSimulationOptions compileOpts executeOpts

global def runDUTSimulator dutSimulator dut dutOptions userOptions =
  dutSimulator.getDUTSimulatorImp
  dut
  dutOptions.getDUTSimulationOptionsCompileOptions
  dutOptions.getDUTSimulationOptionsExecuteOptions
  userOptions

global topic dutSimulators : DUTSimulator

global def simulateDUT dut dutOptions userOptions =
  def compileOpts = dutOptions.getDUTSimulationOptionsCompileOptions
  def executeOpts = dutOptions.getDUTSimulationOptionsExecuteOptions
  def simulators = subscribe dutSimulators
  def simulator =
    def plan = Quadruple dut compileOpts executeOpts userOptions
    def getScore = _.getQuadrupleFourth.getUserSimulationOptionsFilter
    getBestImpForPlan plan getScore getDUTSimulatorScore simulators

  simulator.getDUTSimulatorImp dut compileOpts executeOpts userOptions

tuple DUTSimCompileOptions =
  global IncludeDirs:    List String
  global LibraryDirs:    List String # Verilog library directories
  global Defines:        List NamedArg
  global SourceFiles:    List Path
  global Plusargs:       List NamedArg
  global Resources:      List String # resources to pass to the simulator `Plan`

global def makeDUTSimCompileOptions includeDirs defines sourceFiles plusargs =
  DUTSimCompileOptions includeDirs Nil defines sourceFiles plusargs Nil

global def emptyDUTSimCompileOptions = makeDUTSimCompileOptions Nil Nil Nil Nil

global def withDUTSimCompileOptions dut dutSimCompileOptions =
  dutSimCompileOptions
  | editDUTSimCompileOptionsSourceFiles (dut.getDUTVsrcs ++ _)

global def appendDUTSimCompileOptions (DUTSimCompileOptions includes libraryDirs defines srcs plusargs resources) options =
  options
  | editDUTSimCompileOptionsIncludeDirs  (_ ++ includes)
  | editDUTSimCompileOptionsLibraryDirs  (_ ++ libraryDirs)
  | editDUTSimCompileOptionsDefines      (_ ++ defines)
  | editDUTSimCompileOptionsSourceFiles  (_ ++ srcs)
  | editDUTSimCompileOptionsPlusargs     (_ ++ plusargs)
  | editDUTSimCompileOptionsResources    (_ ++ resources)

global def prependDUTSimCompileOptions (DUTSimCompileOptions includes libraryDirs defines srcs plusargs resources) options =
  options
  | editDUTSimCompileOptionsIncludeDirs  (includes ++ _)
  | editDUTSimCompileOptionsLibraryDirs  (libraryDirs ++ _)
  | editDUTSimCompileOptionsDefines      (defines ++ _)
  | editDUTSimCompileOptionsSourceFiles  (srcs ++ _)
  | editDUTSimCompileOptionsPlusargs     (plusargs ++ _)
  | editDUTSimCompileOptionsResources    (resources ++ _)


tuple DUTSimExecuteOptions =
  global Plusargs:       List NamedArg
  global VisibleFiles:   List Path
  global Resources:      List String # resources to pass to the simulator `Plan`

  # Directory for storing coverage data, generally shared across multiple runs
  # in the same workspace. Should be a path relative to the workspace root.
  #
  # E.g. VCS's -cm_dir option or Xcelium's -covworkdir option.
  global CoverageDir: Option String

  # Name for an individual coverage test run.
  #
  # E.g. VCS's -cm_name option or Xcelium's -covtest option.
  global CoverageTestName: Option String

global def makeDUTSimExecuteOptions = DUTSimExecuteOptions _ _ Nil None None

global def emptyDUTSimExecuteOptions = makeDUTSimExecuteOptions Nil Nil

global def withDUTSimExecuteOptions dut dutSimExecuteOptions = dutSimExecuteOptions

global def appendDUTSimExecuteOptions (DUTSimExecuteOptions plusargs visibleFiles resources covDir covName) options =
  # For Option types, we define "append" as let the new value overwrite the old
  # value if the new value is defined.
  options
  | editDUTSimExecuteOptionsPlusargs     (_ ++ plusargs)
  | editDUTSimExecuteOptionsVisibleFiles (_ ++ visibleFiles)
  | editDUTSimExecuteOptionsResources (_ ++ resources)
  | editDUTSimExecuteOptionsCoverageDir (\oldDir covDir | orElse oldDir)
  | editDUTSimExecuteOptionsCoverageTestName (\oldName covName | orElse oldName)

global def prependDUTSimExecuteOptions (DUTSimExecuteOptions plusargs visibleFiles resources covDir covName) options =
  # For Option types, we define "prepend" as let the old value take precedence
  # over the new value if the old value is defined.
  options
  | editDUTSimExecuteOptionsPlusargs     (plusargs ++ _)
  | editDUTSimExecuteOptionsVisibleFiles (visibleFiles ++ _)
  | editDUTSimExecuteOptionsResources    (resources ++ _)
  | editDUTSimExecuteOptionsCoverageDir (\oldDir oldDir | orElse covDir)
  | editDUTSimExecuteOptionsCoverageTestName (\oldName oldName | orElse covName)
