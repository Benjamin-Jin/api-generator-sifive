tuple VerilatorDUTSimulatorPlan =
  global TestDriver:     String
  global Waves:          Boolean
  global Score:          DUT => DUTSimCompileOptions => DUTSimExecuteOptions => UserSimulationOptions => Double
  global CompileOptions: DUT => PrivateVerilatorDUTSimCompileOptions
  global ExecuteOptions: DUT => PrivateVerilatorDUTSimExecuteOptions

def makeVerilatorDUTSimulatorPlan testDriver waves score compileOptions executeOptions =
  VerilatorDUTSimulatorPlan testDriver waves score compileOptions executeOptions


# compile options that you want to bake into your dut simulator
tuple VerilatorDUTSimCompileOptions =
  global GenericOpts: DUTSimCompileOptions
  global MakeArgs:    List NamedArg
  global ExtraArgs:   List NamedArg
  global Resources:   List String

global def getVerilatorDUTSimCompileOptionsIncludeDirs = _.getVerilatorDUTSimCompileOptionsGenericOpts.getDUTSimCompileOptionsIncludeDirs
global def getVerilatorDUTSimCompileOptionsDefines     = _.getVerilatorDUTSimCompileOptionsGenericOpts.getDUTSimCompileOptionsDefines
global def getVerilatorDUTSimCompileOptionsSourceFiles = _.getVerilatorDUTSimCompileOptionsGenericOpts.getDUTSimCompileOptionsSourceFiles
global def getVerilatorDUTSimCompileOptionsPlusargs    = _.getVerilatorDUTSimCompileOptionsGenericOpts.getDUTSimCompileOptionsPlusargs

global def setVerilatorDUTSimCompileOptionsIncludeDirs v = editVerilatorDUTSimCompileOptionsIncludeDirs (\_ v)
global def setVerilatorDUTSimCompileOptionsDefines     v = editVerilatorDUTSimCompileOptionsDefines     (\_ v)
global def setVerilatorDUTSimCompileOptionsSourceFiles v = editVerilatorDUTSimCompileOptionsSourceFiles (\_ v)
global def setVerilatorDUTSimCompileOptionsPlusargs    v = editVerilatorDUTSimCompileOptionsPlusargs    (\_ v)

global def editVerilatorDUTSimCompileOptionsIncludeDirs f = editVerilatorDUTSimCompileOptionsGenericOpts (editDUTSimCompileOptionsIncludeDirs f)
global def editVerilatorDUTSimCompileOptionsDefines     f = editVerilatorDUTSimCompileOptionsGenericOpts (editDUTSimCompileOptionsDefines f)
global def editVerilatorDUTSimCompileOptionsSourceFiles f = editVerilatorDUTSimCompileOptionsGenericOpts (editDUTSimCompileOptionsSourceFiles f)
global def editVerilatorDUTSimCompileOptionsPlusargs    f = editVerilatorDUTSimCompileOptionsGenericOpts (editDUTSimCompileOptionsPlusargs f)


tuple PrivateVerilatorDUTSimCompileOptions =
  global Main:      Path
  global Prefix:    String
  global TopModule: String
  global DUTOpts:   VerilatorDUTSimCompileOptions

global def getPrivateVerilatorDUTSimCompileOptionsIncludeDirs = _.getPrivateVerilatorDUTSimCompileOptionsDUTOpts.getVerilatorDUTSimCompileOptionsIncludeDirs
global def getPrivateVerilatorDUTSimCompileOptionsDefines     = _.getPrivateVerilatorDUTSimCompileOptionsDUTOpts.getVerilatorDUTSimCompileOptionsDefines
global def getPrivateVerilatorDUTSimCompileOptionsSourceFiles = _.getPrivateVerilatorDUTSimCompileOptionsDUTOpts.getVerilatorDUTSimCompileOptionsSourceFiles
global def getPrivateVerilatorDUTSimCompileOptionsPlusargs    = _.getPrivateVerilatorDUTSimCompileOptionsDUTOpts.getVerilatorDUTSimCompileOptionsPlusargs
global def getPrivateVerilatorDUTSimCompileOptionsMakeArgs    = _.getPrivateVerilatorDUTSimCompileOptionsDUTOpts.getVerilatorDUTSimCompileOptionsMakeArgs
global def getPrivateVerilatorDUTSimCompileOptionsExtraArgs   = _.getPrivateVerilatorDUTSimCompileOptionsDUTOpts.getVerilatorDUTSimCompileOptionsExtraArgs
global def getPrivateVerilatorDUTSimCompileOptionsResources   = _.getPrivateVerilatorDUTSimCompileOptionsDUTOpts.getVerilatorDUTSimCompileOptionsResources

global def setPrivateVerilatorDUTSimCompileOptionsIncludeDirs v = editPrivateVerilatorDUTSimCompileOptionsIncludeDirs (\_ v)
global def setPrivateVerilatorDUTSimCompileOptionsDefines     v = editPrivateVerilatorDUTSimCompileOptionsDefines     (\_ v)
global def setPrivateVerilatorDUTSimCompileOptionsSourceFiles v = editPrivateVerilatorDUTSimCompileOptionsSourceFiles (\_ v)
global def setPrivateVerilatorDUTSimCompileOptionsPlusargs    v = editPrivateVerilatorDUTSimCompileOptionsPlusargs    (\_ v)
global def setPrivateVerilatorDUTSimCompileOptionsMakeArgs    v = editPrivateVerilatorDUTSimCompileOptionsMakeArgs    (\_ v)
global def setPrivateVerilatorDUTSimCompileOptionsExtraArgs   v = editPrivateVerilatorDUTSimCompileOptionsExtraArgs   (\_ v)
global def setPrivateVerilatorDUTSimCompileOptionsResources   v = editPrivateVerilatorDUTSimCompileOptionsResources   (\_ v)

global def editPrivateVerilatorDUTSimCompileOptionsIncludeDirs f = editPrivateVerilatorDUTSimCompileOptionsDUTOpts (editVerilatorDUTSimCompileOptionsIncludeDirs f)
global def editPrivateVerilatorDUTSimCompileOptionsDefines     f = editPrivateVerilatorDUTSimCompileOptionsDUTOpts (editVerilatorDUTSimCompileOptionsDefines f)
global def editPrivateVerilatorDUTSimCompileOptionsSourceFiles f = editPrivateVerilatorDUTSimCompileOptionsDUTOpts (editVerilatorDUTSimCompileOptionsSourceFiles f)
global def editPrivateVerilatorDUTSimCompileOptionsPlusargs    f = editPrivateVerilatorDUTSimCompileOptionsDUTOpts (editVerilatorDUTSimCompileOptionsPlusargs f)
global def editPrivateVerilatorDUTSimCompileOptionsMakeArgs    f = editPrivateVerilatorDUTSimCompileOptionsDUTOpts (editVerilatorDUTSimCompileOptionsMakeArgs f)
global def editPrivateVerilatorDUTSimCompileOptionsExtraArgs   f = editPrivateVerilatorDUTSimCompileOptionsDUTOpts (editVerilatorDUTSimCompileOptionsExtraArgs f)
global def editPrivateVerilatorDUTSimCompileOptionsResources   f = editPrivateVerilatorDUTSimCompileOptionsDUTOpts (editVerilatorDUTSimCompileOptionsResources f)

global def makePrivateVerilatorDUTSimCompileOptions main prefix topModule =
  PrivateVerilatorDUTSimCompileOptions
  main
  prefix
  topModule
  (VerilatorDUTSimCompileOptions emptyDUTSimCompileOptions Nil Nil defaultVerilatorResources)

def toVerilatorSimCompilePlan privateOpts outputDir =
  def dutOpts      = privateOpts.getPrivateVerilatorDUTSimCompileOptionsDUTOpts

  def includeDirs  = privateOpts.getPrivateVerilatorDUTSimCompileOptionsIncludeDirs
  def defines      = privateOpts.getPrivateVerilatorDUTSimCompileOptionsDefines
  def sourceFiles  = privateOpts.getPrivateVerilatorDUTSimCompileOptionsSourceFiles
  def plusargs     = privateOpts.getPrivateVerilatorDUTSimCompileOptionsPlusargs
  def makeArgs     = privateOpts.getPrivateVerilatorDUTSimCompileOptionsMakeArgs
  def extraArgs    = privateOpts.getPrivateVerilatorDUTSimCompileOptionsExtraArgs
  def main         = privateOpts.getPrivateVerilatorDUTSimCompileOptionsMain
  def prefix       = privateOpts.getPrivateVerilatorDUTSimCompileOptionsPrefix
  def topModule    = privateOpts.getPrivateVerilatorDUTSimCompileOptionsTopModule
  def resources    = privateOpts.getPrivateVerilatorDUTSimCompileOptionsResources

  makeVerilatorCompilePlan sourceFiles main topModule outputDir
  | setVerilatorCompilePlanExtraArgs   extraArgs
  | setVerilatorCompilePlanMakeArgs    makeArgs
  | setVerilatorCompilePlanIncludeDirs includeDirs
  | setVerilatorCompilePlanDefines     defines
  | setVerilatorCompilePlanPlusargs    plusargs
  | setVerilatorCompilePlanPrefix      prefix
  | setVerilatorCompilePlanResources   resources


# execute options that you want to bake into your dut simulator
tuple VerilatorDUTSimExecuteOptions =
  global GenericOpts: DUTSimExecuteOptions
  global ExtraArgs:   List NamedArg

global def getVerilatorDUTSimExecuteOptionsPlusargs     = _.getVerilatorDUTSimExecuteOptionsGenericOpts.getDUTSimExecuteOptionsPlusargs
global def getVerilatorDUTSimExecuteOptionsVisibleFiles = _.getVerilatorDUTSimExecuteOptionsGenericOpts.getDUTSimExecuteOptionsVisibleFiles

global def setVerilatorDUTSimExecuteOptionsPlusargs     v = editVerilatorDUTSimExecuteOptionsPlusargs     (\_ v)
global def setVerilatorDUTSimExecuteOptionsVisibleFiles v = editVerilatorDUTSimExecuteOptionsVisibleFiles (\_ v)

global def editVerilatorDUTSimExecuteOptionsPlusargs     f = editVerilatorDUTSimExecuteOptionsGenericOpts (editDUTSimExecuteOptionsPlusargs f)
global def editVerilatorDUTSimExecuteOptionsVisibleFiles f = editVerilatorDUTSimExecuteOptionsGenericOpts (editDUTSimExecuteOptionsVisibleFiles f)


tuple PrivateVerilatorDUTSimExecuteOptions =
  global DUTOpts: VerilatorDUTSimExecuteOptions

global def makePrivateVerilatorDUTSimExecuteOptions =
   PrivateVerilatorDUTSimExecuteOptions (VerilatorDUTSimExecuteOptions emptyDUTSimExecuteOptions Nil)

global def getPrivateVerilatorDUTSimExecuteOptionsPlusargs     = _.getPrivateVerilatorDUTSimExecuteOptionsDUTOpts.getVerilatorDUTSimExecuteOptionsPlusargs
global def getPrivateVerilatorDUTSimExecuteOptionsVisibleFiles = _.getPrivateVerilatorDUTSimExecuteOptionsDUTOpts.getVerilatorDUTSimExecuteOptionsVisibleFiles
global def getPrivateVerilatorDUTSimExecuteOptionsExtraArgs    = _.getPrivateVerilatorDUTSimExecuteOptionsDUTOpts.getVerilatorDUTSimExecuteOptionsExtraArgs

global def setPrivateVerilatorDUTSimExecuteOptionsPlusargs     v = editPrivateVerilatorDUTSimExecuteOptionsPlusargs     (\_ v)
global def setPrivateVerilatorDUTSimExecuteOptionsVisibleFiles v = editPrivateVerilatorDUTSimExecuteOptionsVisibleFiles (\_ v)
global def setPrivateVerilatorDUTSimExecuteOptionsExtraArgs    v = editPrivateVerilatorDUTSimExecuteOptionsExtraArgs    (\_ v)

global def editPrivateVerilatorDUTSimExecuteOptionsPlusargs     f = editPrivateVerilatorDUTSimExecuteOptionsDUTOpts (editVerilatorDUTSimExecuteOptionsPlusargs f)
global def editPrivateVerilatorDUTSimExecuteOptionsVisibleFiles f = editPrivateVerilatorDUTSimExecuteOptionsDUTOpts (editVerilatorDUTSimExecuteOptionsVisibleFiles f)
global def editPrivateVerilatorDUTSimExecuteOptionsExtraArgs    f = editPrivateVerilatorDUTSimExecuteOptionsDUTOpts (editVerilatorDUTSimExecuteOptionsExtraArgs f)


def toVerilatorSimExecutePlan opts compileOutputs outputDir =
  def plusargs     = opts.getPrivateVerilatorDUTSimExecuteOptionsPlusargs
  def visibleFiles = opts.getPrivateVerilatorDUTSimExecuteOptionsVisibleFiles
  def extraArgs    = opts.getPrivateVerilatorDUTSimExecuteOptionsExtraArgs

  makeVerilatorExecutePlan compileOutputs outputDir
  | setVerilatorExecutePlanPlusargs     plusargs
  | setVerilatorExecutePlanVisibleFiles visibleFiles
  | setVerilatorExecutePlanExtraArgs    extraArgs


# takes a VerialtorDUTSimulatorPlan and makes a DUTSimulator
global def makeVerilatorDUTSimulator plan =
  def simName   = "verilator"
  def simVendor = "veripool"
  def testDriver = plan.getVerilatorDUTSimulatorPlanTestDriver
  def waves  = plan.getVerilatorDUTSimulatorPlanWaves
  def score  = plan.getVerilatorDUTSimulatorPlanScore

  def imp dut rawCompileOptions rawExecuteOptions userOptions =
    def filter sim = dutSimulatorNameEquals simName sim && dutSimulatorVendorEquals simVendor sim

    def compileOutputs =
      def appendUserPlusargs = _ ++ userOptions.getUserSimulationOptionsCompilePlusargs
      def appendDUTOptions = editVerilatorDUTSimCompileOptionsGenericOpts (appendDUTSimCompileOptions dut.getDUTSimCompileOptions)
      def privateOpts =
        plan.getVerilatorDUTSimulatorPlanCompileOptions dut
        | editPrivateVerilatorDUTSimCompileOptionsDUTOpts appendDUTOptions
        | editPrivateVerilatorDUTSimCompileOptionsPlusargs appendUserPlusargs
        | applyPartialEdits dut (subscribe verilatorDUTSimCompileOptionsHooks)
      def outputDir = userOptions.getUserSimulationOptionsCompileOutputDir
      toVerilatorSimCompilePlan privateOpts outputDir
      | doVerilatorCompile

    def executeOutputs =
      def appendUserPlusargs = _ ++ userOptions.getUserSimulationOptionsExecutePlusargs
      def appendDUTOptions = editVerilatorDUTSimExecuteOptionsGenericOpts (appendDUTSimExecuteOptions rawExecuteOptions)
      def privateOpts =
        plan.getVerilatorDUTSimulatorPlanExecuteOptions dut
        | editPrivateVerilatorDUTSimExecuteOptionsDUTOpts appendDUTOptions
        | editPrivateVerilatorDUTSimExecuteOptionsPlusargs appendUserPlusargs
        | applyPartialEdits dut (subscribe verilatorDUTSimExecuteOptionsHooks)
      def outputDir = userOptions.getUserSimulationOptionsExecuteOutputDir
      toVerilatorSimExecutePlan privateOpts compileOutputs outputDir
      | doVerilatorExecute

    executeOutputs
    | getVerilatorExecuteOutputsJob
    | makeSimulationOutput

  makeDUTSimulatorPlan simName simVendor testDriver waves score imp
  | makeDUTSimulator

global def verilatorCompile dut userOptions =
  def compileOutputs =
    def appendUserPlusargs = _ ++ userOptions.getUserSimulationOptionsCompilePlusargs
    def appendDUTOptions = editVerilatorDUTSimCompileOptionsGenericOpts (appendDUTSimCompileOptions dut.getDUTSimulationOptions.getDUTSimulationOptionsCompileOptions)
    def privateOpts =
      verilatorCompileOptsExtract False dut
      | editPrivateVerilatorDUTSimCompileOptionsPlusargs appendUserPlusargs
      | editPrivateVerilatorDUTSimCompileOptionsDUTOpts appendDUTOptions
      | applyPartialEdits dut (subscribe verilatorDUTSimCompileOptionsHooks)
    def outputDir = userOptions.getUserSimulationOptionsCompileOutputDir
    toVerilatorSimCompilePlan privateOpts outputDir
    | doVerilatorCompile

  compileOutputs

def verilatorCompileOptsExtract waves dut =
  def main = source "{here}/../csrc/verilator-main.cpp".simplify
  def prefix = "V{freedomTestDriverName}"
  def topModule = "TestDriver"

  def makeArgs =
    NamedArg "--jobs=8",
    NamedArg "--load-average=15.0",
    NamedArg "CXX=g++",
    NamedArg "OPT=-O2 -DVL_DEBUG=1",
    NamedArg "VM_PARALLEL_BUILDS=1",
    Nil

  def extraArgs =
    def cflags =
      "-std=c++14",
      "-no-pie",
      "-DTEST_HARNESS={prefix}",
      Nil

    NamedArgInteger "--error-limit"         9999,
    NamedArgInteger "--output-split"        1000000,
    NamedArgInteger "--output-split-cfuncs" 80000,
    NamedArgInteger "--inline-mult"         100000,
    NamedArg "--cc",
    NamedArg "--exe",
    NamedArg "--vpi",
    NamedArg "-sv",
    NamedArg "-Wno-STMTDLY",
    NamedArg "-Wno-WIDTH",
    NamedArg "-Wno-UNUSED",
    NamedArg "--x-assign",
    NamedArg "unique",
    NamedArg "--assert",
    NamedArg "--report-unoptflat",
    NamedArgString "-CFLAGS" (catWith " " cflags),
    Nil

  def withWavesOptions opts =
    if waves
    then
      opts
      | editPrivateVerilatorDUTSimCompileOptionsDefines (NamedArg "DEBUG", _)
      | editPrivateVerilatorDUTSimCompileOptionsExtraArgs (NamedArg "--trace", _)
    else opts

  def genericOpts = freedomTestDriverSimCompileOpts dut

  makePrivateVerilatorDUTSimCompileOptions main prefix topModule
  | editPrivateVerilatorDUTSimCompileOptionsDUTOpts (setVerilatorDUTSimCompileOptionsGenericOpts genericOpts)
  | setPrivateVerilatorDUTSimCompileOptionsMakeArgs makeArgs
  | setPrivateVerilatorDUTSimCompileOptionsExtraArgs extraArgs
  | withWavesOptions

def verilatorExecuteOptsExtract waves dut =
  def withWavesOptions opts =
    if waves
    then opts | editPrivateVerilatorDUTSimExecuteOptionsPlusargs (NamedArgString "vcdfile" "sim.vcd", _)
    else opts

  def genericOpts = freedomTestDriverSimExecuteOpts dut

  makePrivateVerilatorDUTSimExecuteOptions
  | editPrivateVerilatorDUTSimExecuteOptionsDUTOpts (setVerilatorDUTSimExecuteOptionsGenericOpts genericOpts)
  | withWavesOptions

def makeFreedomVerilatorDUTSimulator waves =
  def name = "verilator"
  def score = (\_ \_ \_ \_ 1.0) # TODO
  def compileOptions = verilatorCompileOptsExtract waves
  def executeOptions = verilatorExecuteOptsExtract waves
  makeVerilatorDUTSimulatorPlan name waves score compileOptions executeOptions
  | makeVerilatorDUTSimulator


publish dutSimulators = freedomVerilatorDUTSimulator, freedomVerilatorWavesDUTSimulator, Nil
global def freedomVerilatorDUTSimulator = makeFreedomVerilatorDUTSimulator False
global def freedomVerilatorWavesDUTSimulator = makeFreedomVerilatorDUTSimulator True
