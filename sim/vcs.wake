tuple VCSCompilePlan =
  global Resources:   List String
  global IncludeDirs: List String
  global LibraryDirs: List String # Verilog library directories as used in -y option
  global Defines:     List NamedArg
  global SourceFiles: List Path
  global Plusargs:    List NamedArg
  global ExtraArgs:   List NamedArg
  global Visible:     List Path
  global TmpDir:      String
  global OutputDir:   String

def dir / subdir = "{dir.getPathName}/{subdir}"

global def defaultVCSResources = "synopsys/vcs/M-2017.03-SP2", Nil

global def makeVCSCompilePlan sourceFiles outputDir =
  VCSCompilePlan
  defaultVCSResources   # Resources
  Nil                   # IncludeDirs
  Nil                   # LibraryDirs
  Nil                   # Defines
  sourceFiles           # Files
  Nil                   # Plusargs
  Nil                   # ExtraArgs
  Nil                   # Visible
  "{outputDir}/tmp"     # TmpDir
  outputDir             # OutputDir

def vcsWrapperScript = simplify "{here}/../scripts/vcs_wrapper"

def compileCmdlineArgs options =
  def outputDir    = options.getVCSCompilePlanOutputDir
  def includeDirs  = options.getVCSCompilePlanIncludeDirs
  def libraryDirs  = options.getVCSCompilePlanLibraryDirs
  def defines      = options.getVCSCompilePlanDefines
  def plusargs     = options.getVCSCompilePlanPlusargs
  def rawFiles     = options.getVCSCompilePlanSourceFiles
  def otherArgs    = namedArgsToListString runDir options.getVCSCompilePlanExtraArgs

  def files = distinctBy (scmpIdentifier _.getPathName _.getPathName) rawFiles
  def runDir = outputDir

  def includeArgs = map (\i "+incdir+{relative runDir i}") includeDirs
  def libraryDirArgs = mapFlat (\i '-y', (relative runDir i), Nil) libraryDirs
  def defineArgs  = namedArgsToCmdline runDir "+define+" "=" defines
  def plusargArgs = namedArgsToCmdline runDir "+" "=" plusargs
  def fileArgs    = map (relative runDir _.getPathName) files

  relative runDir vcsWrapperScript,
  includeArgs
  ++ libraryDirArgs
  ++ defineArgs
  ++ plusargArgs
  ++ otherArgs
  ++ fileArgs


def compileInputs options =
  def outputDir    = options.getVCSCompilePlanOutputDir
  def includeDirs  = options.getVCSCompilePlanIncludeDirs
  def libraryDirs  = options.getVCSCompilePlanLibraryDirs
  def srcFiles     = options.getVCSCompilePlanSourceFiles
  def tmpDir       = options.getVCSCompilePlanTmpDir
  def visible      = options.getVCSCompilePlanVisible

  def includeSources = map (sources _ `.*`) includeDirs | flatten
  def librarySources = map (sources _ `.*`) libraryDirs | flatten

  source vcsWrapperScript, mkdir tmpDir, mkdir outputDir, includeSources ++ librarySources ++ srcFiles ++ visible

global def doVCSCompile options =
  def outputDir = options.getVCSCompilePlanOutputDir
  def cmdline = options.compileCmdlineArgs
  def inputs = options.compileInputs

  def tmpDirEnv =
    def rawTmpDir = options.getVCSCompilePlanTmpDir
    def tmpDir = mkdir rawTmpDir
    "TMPDIR={relative outputDir tmpDir.getPathName}"
  def vcsJob =
    makePlan cmdline inputs
    | setPlanDirectory outputDir
    | setPlanResources options.getVCSCompilePlanResources
    | runJob
  def vcsOutputs = vcsJob.getJobOutputs

  def simv =
    def simvFilename = "{outputDir}/simv"
    def findSimv =
      vcsOutputs
      | map getPathResult
      | findFail
      | rmap (\_ find (matches simvFilename.quote _.getPathName) vcsOutputs)
    match findSimv
      Fail e = e.makeBadPath
      Pass (Some (Pair s _)) = s
      Pass (None) = "VCS compile failed: no simv found".makeError.makeBadPath

  VCSCompileOutputs vcsOutputs options simv

tuple VCSCompileOutputs =
  AllOutputs_:   List Path
  Plan_:         VCSCompilePlan
  Simv_:         Path

global def getVCSCompileOutputsAllOutputs = getVCSCompileOutputsAllOutputs_
global def getVCSCompileOutputsPlan       = getVCSCompileOutputsPlan_
global def getVCSCompileOutputsSimv       = getVCSCompileOutputsSimv_


tuple VCSExecutePlan =
  global OutputDir:      String
  global Plusargs:       List NamedArg
  global VisibleFiles:   List Path
  global CompileOutputs: VCSCompileOutputs
  global ExtraArgs:      List NamedArg
  global StderrTailNum:  Integer
  global StdoutTailNum:  Integer
  global Resources:      List String

global def makeVCSExecutePlan compileOutputs outputDir =
  VCSExecutePlan outputDir Nil Nil compileOutputs Nil 5000 5000 Nil

global def doVCSExecute options =
  def compileOutputs = options.getVCSExecutePlanCompileOutputs
  def simv = compileOutputs.getVCSCompileOutputsSimv
  def outputDir = options.getVCSExecutePlanOutputDir

  def wrapperScript = source "{here}/../scripts/redirect_wrapper"
  def inputs =
    def allCompileOutputs = compileOutputs.getVCSCompileOutputsAllOutputs
    def extraSources = options.getVCSExecutePlanVisibleFiles
    wrapperScript, mkdir outputDir, simv, (allCompileOutputs ++ extraSources)
  def stderrFile = "{outputDir}/sim.err"
  def stdoutFile = "{outputDir}/sim.out"

  def cmdline =
    def plusargs = namedArgsToCmdline outputDir "+" "=" options.getVCSExecutePlanPlusargs
    def extraArgs = namedArgsToListString outputDir options.getVCSExecutePlanExtraArgs
    relative outputDir wrapperScript.getPathName,
    relative outputDir stdoutFile,
    relative outputDir stderrFile,
    str options.getVCSExecutePlanStdoutTailNum,
    str options.getVCSExecutePlanStderrTailNum,
    "./{relative outputDir simv.getPathName}",
    (extraArgs ++ plusargs)

  def jobResult =
    makePlan cmdline inputs
    | setPlanDirectory outputDir
    | setPlanResources options.getVCSExecutePlanResources
    | runJob

  VCSExecuteOutputs options jobResult

tuple VCSExecuteOutputs =
  Plan_: VCSExecutePlan
  Job_:  Job

target readOutput fileName =
  def regex = regExpCat (`(.*/)?`, fileName.quote, Nil)
  _
  | getVCSExecuteOutputsRawOutputs
  | filter (matches regex _.getPathName)
  | head
  | getOrFail "VCS: could not find {fileName}".makeError
  | rmapPass read
global def getVCSExecuteOutputsRawOutputs = _.getVCSExecuteOutputsJob_.getJobFailedOutputs
global def getVCSExecuteOutputsStdout     = _.getVCSExecuteOutputsJob_.getJobStdout
global def getVCSExecuteOutputsStderr     = _.getVCSExecuteOutputsJob_.getJobStderr
global def getVCSExecuteOutputsStatus     = _.getVCSExecuteOutputsJob_.getJobStatus
global def getVCSExecuteOutputsPlan       = getVCSExecuteOutputsPlan_
global def getVCSExecuteOutputsJob        = getVCSExecuteOutputsJob_
