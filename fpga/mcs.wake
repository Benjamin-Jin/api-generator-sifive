tuple BitstreamPlan =
  global Name:      String
  global Vendor:    String
  global Board:     String
  global TopModule: String
  global TclFiles:  List Path
  global OutputDir: String
  global Vsrcs:     List Path
  global Resources: List String
  global VisibleFiles: List Path

global def makeBitstreamPlan name vendor board topModule outputDir =
  def resources = "xilinx/vivado/2018.2", Nil
  BitstreamPlan name vendor board topModule Nil outputDir Nil resources Nil

# TODO - should this be moved to fpga-shells?
def vc707migHook =
  def name = "vc707_1gb_mig"
  def addResources = "vivado/vc7071gmig/1.0"
  makeBlackBoxHook name addResources

global target fpgaSynthOnly plan =
    runVivadoWithPlan plan "fpga-shells/xilinx/common/tcl/synth-only.tcl"

global target makeBitstream plan =
  def vivadoBitstream = runVivadoWithPlan plan  "fpga-shells/xilinx/common/tcl/vivado.tcl"
  BitstreamOutputs
  vivadoBitstream.getVivadoOutputBitstream
  vivadoBitstream.getVivadoOutputAllOutputs
  plan

global target runVivadoWithPlan plan tclFile =
  def name = plan.getBitstreamPlanName
  def resources = plan.getBitstreamPlanResources
  def outputDir = plan.getBitstreamPlanOutputDir
  def designTopModule = plan.getBitstreamPlanTopModule
  def vendor = plan.getBitstreamPlanVendor
  def board = plan.getBitstreamPlanBoard
  def visibleFiles = plan.getBitstreamPlanVisibleFiles

  def sourceTcl = source tclFile
  def tclFiles = plan.getBitstreamPlanTclFiles
  def vsrcs = plan.getBitstreamPlanVsrcs
  def runDir = outputDir

  def ffile =
    map (relative runDir _.getPathName) vsrcs
    | catWith "\n"
    | write "{runDir}/verilog.F"

  def tclArgs =
    def tclsString =
      tclFiles
      | map (relative runDir _.getPathName)
      | ("{catWith "  " _}")
    "-top-module",     designTopModule,
    "-board",          board,
    "-F",              (relative runDir ffile.getPathName),
    "-ip-vivado-tcls", tclsString,
    "-env-var-srcs",   "WAKE_IP_RESOURCE_FILES",
    Nil

  def fnOutputs _ = files outputDir `.*\.bit`

  def tclSupportFiles =
    (sources "fpga-shells/{vendor}/{board}/tcl" `.*\.tcl`)
    ++ (sources "fpga-shells/{vendor}/common/tcl/" `.*\.tcl`)
    ++ (sources "fpga-shells/{vendor}/{board}/constraints/" `.*\.xdc`)

  def allVisibleFiles =
    (outputDir.mkdir, ffile, Nil)
    ++ visibleFiles
    ++ tclSupportFiles
    ++ vsrcs
    ++ tclFiles

  makeVivadoPlan sourceTcl outputDir
  | setVivadoPlanTclArgs tclArgs
  | setVivadoPlanResources resources
  | setVivadoPlanFnOutputs fnOutputs
  | setVivadoPlanVisibleFiles allVisibleFiles
  | runVivado

tuple BitstreamOutputs =
  global Bitstream:    Path
  global AllOutputs:   List Path
  global Plan:         BitstreamPlan

tuple MCSPlan =
  global ProgramImage: Option Path
  global Bitstream: BitstreamOutputs

global def makeMCSPlan bitstream = MCSPlan None bitstream

global def makeMCS plan =
  def bitstreamOutputs = plan.getMCSPlanBitstream
  def bitstreamPlan = bitstreamOutputs.getBitstreamOutputsPlan
  def bitstream = bitstreamOutputs.getBitstreamOutputsBitstream

  def name      = bitstreamPlan.getBitstreamPlanName
  def resources = bitstreamPlan.getBitstreamPlanResources
  def outputDir = bitstreamPlan.getBitstreamPlanOutputDir
  def vendor    = bitstreamPlan.getBitstreamPlanVendor
  def board     = bitstreamPlan.getBitstreamPlanBoard
  def programImgList =
    plan.getMCSPlanProgramImage
    | omap (_, Nil)
    | getOrElse Nil

  def outputFile = "{outputDir}/{board}.{name}.mcs"
  def vivadoMCS =
    def sourceTcl = source "fpga-shells/{vendor}/common/tcl/write_cfgmem.tcl"
    def tclArgs =
      board,
      relative outputDir outputFile,
      relative outputDir bitstream.getPathName,
      map (relative outputDir _.getPathName) programImgList

    def tclSupportFiles =
      (sources "fpga-shells/{vendor}/{board}/tcl" `.*\.tcl`)
      ++ (sources "fpga-shells/{vendor}/common/tcl" `.*\.tcl`)

    makeVivadoPlan sourceTcl outputDir
    | setVivadoPlanTclArgs tclArgs
    | setVivadoPlanFnOutputs (filter (matches `.*\.mcs`))
    | setVivadoPlanResources resources
    | setVivadoPlanVisibleFiles (outputDir.mkdir, bitstream, programImgList ++ tclSupportFiles)
    | runVivado

  def outs =
    vivadoMCS
    | getVivadoOutputAllOutputs
  
  outs
  | head
  | getOrElse "MCS failed: {outputFile}".makeError.makeBadPath
  | MCSOutputs plan outs

tuple MCSOutputs =
  Plan_: MCSPlan
  MCSList_: List Path
  MCS_: Path

global def getMCSOutputsPlan = getMCSOutputsPlan_
global def getMCSOutputsMCS  = getMCSOutputsMCS_
global def getMCSOutputsMCSList  = getMCSOutputsMCSList_
