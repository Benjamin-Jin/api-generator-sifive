def jFirrtlLogLevel = jStringEnum (
  "error" → FirrtlLogError,
  "warn"  → FirrtlLogWarn,
  "info"  → FirrtlLogInfo,
  "debug" → FirrtlLogDebug,
  "trace" → FirrtlLogTrace,
  Nil
)

def jFirrtlCompiler = jStringEnum (
  "high"     → FirrtlCompileHigh,
  "middle"   → FirrtlCompileMiddle,
  "low"      → FirrtlCompileLow,
  "verilog"  → FirrtlCompileVerilog,
  "mverilog" → FirrtlCompileMVerilog,
  "sverilog" → FirrtlCompileSVerilog,
  "none"     → FirrtlCompileNone,
  Nil
)

def jFirrtlInfoMode = jStringEnum (
  "ignore" → FirrtlInfoIgnore,
  "use"    → FirrtlInfoUse,
  "gen"    → FirrtlInfoGen,
  "append" → FirrtlInfoAppend,
  Nil
)

def jAnnotation = jOneOf (
  jField "file" jSource,
  Nil
)

def jFirrtlTrasform = jString
def jReplSeqMem =
  jMap2 Pair
  (jField "circuit" jString)
  (jField "confFile" jString)

publish buildTargets = firrtlBuildTarget, Nil


data Annotations =
  AnnotationsPath Path
  AnnotationsJValue (filename: String) JValue

def jFirrtlAnnotations jPath =
  def base = jOneOf (
    jMap AnnotationsPath jPath,
    jMap2 AnnotationsJValue (jField "filename" jString) (jField "rawJValue" jAny),
    Nil
  )
  jOneOf (
    jNestedArrayMap base,
    jMap (_, Nil) base,
    Nil
  )

target writeTarget path contents = write path contents

data MkdirParams =
  SingleDir (dir: String)
  ListDirs (dirs: List String)
  NamedDirs (List (Pair (name: String) (dir: String)))

def jMkdirParams = jOneOf (
  jMap SingleDir jString,
  jMap ListDirs (jArrayMap jString),
  jMap NamedDirs (jObjectMap jString),
  Nil
)

publish buildTargets = mkdirBuildTarget, Nil

def mkdirBuildTarget =
  baseBuildTargetPlan "mkdir"
  | dependsOnUnnamed jMkdirParams
  | definedAs (
    \params \_
    match params
      SingleDir dir =
        def path = mkdir dir
        dir
        | mkdir
        | getPathResult
        | rmap bPath
      ListDirs dirs =
        dirs
        | map mkdir
        | findFailFn getPathResult
        | rmap (_ | map bPath | bArray)
      NamedDirs namedDirs =
        def pathMap = map (editPairSecond mkdir) namedDirs
        pathMap
        | findFailFn (_.getPairSecond.getPathResult)
        | rmap (\_ pathMap | map (editPairSecond bPath) | bObject)
  )
  | exports (_)
  | makeBuildTarget

global def firrtlBuildTarget =
  baseBuildTargetPlan "firrtl"
  | dependsOnFn "classpath" (\jPath jOneOf (
    jNestedArrayMap jPath,
    (jMap scalaModuleClasspath jBuildTargetScalaModule),
    Nil
  ))
  | dependsOn "topname" jString
  | dependsOnFn "inputFile" (_)
  | dependsOnOption "logLevel" jFirrtlLogLevel
  | dependsOnOptionFn "annotations" jFirrtlAnnotations
  | dependsOnOption "compiler" jFirrtlCompiler
  | dependsOnOption "infoMode" jFirrtlInfoMode
  | dependsOnOption "customTransforms" (jNestedArrayMap jString)
  | dependsOnOption "inferRW" jBoolean
  | dependsOnOption "replSeqMem" (jNestedArrayMap jReplSeqMem)
  | dependsOnOption "splitModules" jBoolean
  | dependsOnOption "javaOptions" (jNestedArrayMap jString)
  | dependsOnOptionFn "visibleFiles" jNestedArrayMap
  | definedAs (
    \classpath
    \topname
    \inputFile
    \logLevel
    \annotations
    \compiler
    \infoMode
    \customTransforms
    \inferRW
    \rawReplSeqMem
    \splitModules
    \javaOpts
    \visibleFiles
    \buildInput

    match buildInput.getBuildTargetInputsOutputDir
      None = Fail "no target directory specified".makeError
      Some targetDir =
        def defaultJavaOpts = "-Xmx4G", "-Xss5M", Nil
        def toTargetDirFile file = "{targetDir}/{file}".simplify
        def replSeqMem =
          rawReplSeqMem
          | getOrElse Nil
          | map (editPairSecond toTargetDirFile)
        def annotationsPaths =
          annotations
          | getOrElse Nil
          | map (match _
            AnnotationsPath p = p
            AnnotationsJValue filename jvalue =
              writeTarget "{targetDir}/{filename}".simplify jvalue.prettyJSON
          )
        def firrtlCompile =
          makeFirrtlCompilePlan classpath topname targetDir inputFile
          | setFirrtlCompilePlanLogLevel (getOrElse FirrtlLogInfo logLevel)
          | setFirrtlCompilePlanAnnoFiles annotationsPaths
          | setFirrtlCompilePlanCompiler (getOrElse FirrtlCompileVerilog compiler)
          | setFirrtlCompilePlanInfoMode (getOrElse FirrtlInfoAppend infoMode)
          | setFirrtlCompilePlanCustomTransforms (customTransforms | getOrElse Nil)
          | setFirrtlCompilePlanInferRW (getOrElse False inferRW)
          | setFirrtlCompilePlanReplSeqMem replSeqMem
          | setFirrtlCompilePlanSplitModules (getOrElse False splitModules)
          | setFirrtlCompilePlanJavaOpts (javaOpts | getOrElse defaultJavaOpts)
          | setFirrtlCompilePlanVisibleFiles (visibleFiles | getOrElse Nil)
          | runFirrtlCompile
        def findFile (Pair _ rawFilename) =
          def filename = rawFilename.toTargetDirFile
          firrtlCompile
          | getFirrtlCompileOutputsAllOutputs
          | find (_.getPathName ==* filename)
          | omap (rawFilename → _.getPairFirst)
        def memConfOutputs =
          rawReplSeqMem
          | getOrElse Nil
          | mapPartial findFile
        firrtlCompile
        | getFirrtlCompileOutputsAllOutputs
        | findFailFn getPathResult
        | rmap (\_ firrtlCompile → memConfOutputs)
  )
  | exports (\(Pair firrtlCompile memConfOutputs) (
    def allOutputs = firrtlCompile.getFirrtlCompileOutputsAllOutputs
    def targetDirOutputs = firrtlCompile.getFirrtlCompileOutputsTargetOutputs
    def verilogOutputs = filter (matches `.*\.v` _.getPathName) allOutputs
    def systemVerilogOutputs = filter (matches `.*\.s?v` _.getPathName) allOutputs
    bObject (
      "targetDirOutputs" → bArray (map bPath targetDirOutputs),
      "systemVerilogOutputs" → bArray (map bPath systemVerilogOutputs),
      "verilogOutputs" → bArray (map bPath systemVerilogOutputs),
      "allOutputs" → bArray (map bPath allOutputs),
      "memConf" → bObject (
        map (\(Pair name path) name → bPath path) memConfOutputs
      ),
      Nil
    )
  ))
  | makeBuildTarget
